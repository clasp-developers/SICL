Most Common Lisp implementations seem to use a derivative of MIT LOOP.
This implementation predates the Common Lisp standard, which means
that it does not use some of the features of Common Lisp that were not
part of the language before 1994.  As a consequence, the LOOP
implementation in all major Common Lisp implementation is monolithic
and therefore hard to maintain and extend.

Furthermore, MIT LOOP is not a conforming LOOP implementation, in that
it produces the wrong result for certain inputs.  In addition, MIT
LOOP accepts sequences of LOOP clauses with undefined behavior
according to the standard, though whether such extended behavior is a
problem is debatable.

We describe a modern implementation of the Common Lisp LOOP macro.
This implementation is part of the SICL project.  To make this
implementation of the macro modular, maintainable, and extensible, we
use combinator parsing to recognize LOOP clauses, and we use CLOS
generic functions for code generation.
